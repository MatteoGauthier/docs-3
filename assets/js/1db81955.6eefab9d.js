"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[5183],{52393:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[{value:"Create social IdP&#39;s account and register SAML application (IdP)",id:"create-social-idps-account-and-register-saml-application-idp",level:3},{value:"Configure SAML connector (SP)",id:"configure-saml-connector-sp",level:3},{value:"entityID <code>Required</code>",id:"entityid-required",level:4},{value:"signInEndpoint <code>Required</code>",id:"signinendpoint-required",level:4},{value:"x509Certificate <code>Required</code>",id:"x509certificate-required",level:4},{value:"idpMetadataXml <code>Required</code>",id:"idpmetadataxml-required",level:4},{value:"assertionConsumerServiceUrl <code>Required</code>",id:"assertionconsumerserviceurl-required",level:4},{value:"signAuthnRequest",id:"signauthnrequest",level:4},{value:"encryptAssertion",id:"encryptassertion",level:4},{value:"requestSignatureAlgorithm",id:"requestsignaturealgorithm",level:4},{value:"messageSigningOrder",id:"messagesigningorder",level:4},{value:"privateKey and privateKeyPass",id:"privatekey-and-privatekeypass",level:4},{value:"encPrivateKey and encPrivateKeyPass",id:"encprivatekey-and-encprivatekeypass",level:4},{value:"nameIDFormat",id:"nameidformat",level:4},{value:"timeout",id:"timeout",level:4},{value:"profileMap",id:"profilemap",level:4},{value:"Config types",id:"config-types",level:4},{value:"Reference",id:"reference",level:3}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"create-social-idps-account-and-register-saml-application-idp",children:"Create social IdP's account and register SAML application (IdP)"}),"\n",(0,i.jsx)(n.p,{children:"Let's go through configurations of SAML connector."}),"\n",(0,i.jsx)(n.p,{children:"Before we kicking off, you can go to a social identity provider which supports SAML protocol and create your own account. Okta, OneLogin, Salesforce and some other platforms support authentication based on SAML protocol."}),"\n",(0,i.jsx)(n.p,{children:"If your IdP mandate the encryption of SAML assertion and receiving of signed authentication requests, you should generate your private key and corresponding certificate using RSA algorithm. Keep the private key for your SP use and upload the certificate to IdP."}),"\n",(0,i.jsxs)(n.p,{children:["You also need to configure the ACS (Assertion Consumer Service) URL as ",(0,i.jsx)(n.code,{children:"${your_logto_origin}/api/authn/saml/${connector_id}"})," to handle IdP's SAML assertion. Where you can find your ",(0,i.jsx)(n.code,{children:"connectorId"})," at SAML connector's details page in Logto's Admin Console."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2139\ufe0f ",(0,i.jsx)(n.strong,{children:"Note"})]}),"\n",(0,i.jsx)(n.p,{children:"Per current Logto's design, we only support Redirect-binding for sending authentication request and POST-binding for receiving SAML assertion. Although this sounds not cool, but we believe that the current design can handle most of your use cases. If you have any problems, feel free to reach out!"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configure-saml-connector-sp",children:"Configure SAML connector (SP)"}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will introduce each attribute in detail."}),"\n",(0,i.jsxs)(n.h4,{id:"entityid-required",children:["entityID ",(0,i.jsx)(n.code,{children:"Required"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"entityID"})," (i.e. ",(0,i.jsx)(n.code,{children:"issuer"}),") is Entity identifier. It is used to identify your entity (SAML SP entity), and match the equivalence in each SAML request/response."]}),"\n",(0,i.jsxs)(n.h4,{id:"signinendpoint-required",children:["signInEndpoint ",(0,i.jsx)(n.code,{children:"Required"})]}),"\n",(0,i.jsxs)(n.p,{children:["The IdP's endpoint that you send SAML authentication requests to. Usually, you can find this value in IdP details page (i.e. IdP's ",(0,i.jsx)(n.code,{children:"SSO URL"})," or ",(0,i.jsx)(n.code,{children:"Login URL"}),")."]}),"\n",(0,i.jsxs)(n.h4,{id:"x509certificate-required",children:["x509Certificate ",(0,i.jsx)(n.code,{children:"Required"})]}),"\n",(0,i.jsx)(n.p,{children:"The x509 certificate generated from IdPs private key, IdP is expected to have this value available."}),"\n",(0,i.jsxs)(n.p,{children:["The content of the certificate comes with ",(0,i.jsx)(n.code,{children:"-----BEGIN CERTIFICATE-----"})," header and ",(0,i.jsx)(n.code,{children:"-----END CERTIFICATE-----"})," tail."]}),"\n",(0,i.jsxs)(n.h4,{id:"idpmetadataxml-required",children:["idpMetadataXml ",(0,i.jsx)(n.code,{children:"Required"})]}),"\n",(0,i.jsx)(n.p,{children:"The field is used to place contents from your IdP metadata XML file."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2139\ufe0f ",(0,i.jsx)(n.strong,{children:"Note"})]}),"\n",(0,i.jsxs)(n.p,{children:["The XML parser we are using does not support customized namespace.\nIf the IdP metadata comes with namespace, you should manually remove them.\nFor namespace of XML file, see ",(0,i.jsx)(n.a,{href:"http://www.xmlmaster.org/en/article/d01/c10/",children:"reference"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"assertionconsumerserviceurl-required",children:["assertionConsumerServiceUrl ",(0,i.jsx)(n.code,{children:"Required"})]}),"\n",(0,i.jsxs)(n.p,{children:["The assertion consumer service (ACS) URL is the SP's endpoint to receive IdP's SAML Assertion POST requests. As we mentioned in previous part, it is usually configured at IdP settings but some IdP get this value from SAML authentication requests, we hence also add this value as a REQUIRED field. It's value should look like ",(0,i.jsx)(n.code,{children:"${your_logto_origin}/api/authn/saml/${connector_id}"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"signauthnrequest",children:"signAuthnRequest"}),"\n",(0,i.jsxs)(n.p,{children:["The boolean value that controls whether SAML authentication request should be signed, whose default value is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"encryptassertion",children:"encryptAssertion"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"encryptAssertion"})," is a boolean value that indicates if IdP will encrypt SAML assertion, with default value ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2139\ufe0f ",(0,i.jsx)(n.strong,{children:"Note"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"signAuthnRequest"})," and ",(0,i.jsx)(n.code,{children:"encryptAssertion"})," attributes should align with corresponding parameters of IdP setting, otherwise error will be thrown to show that configuration does not match.\nAll SAML responses need to be signed."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"requestsignaturealgorithm",children:"requestSignatureAlgorithm"}),"\n",(0,i.jsxs)(n.p,{children:["This should be aligned with the signature algorithms of IdP so that Logto can verify the signature of the SAML assertion. Its value should be either ",(0,i.jsx)(n.code,{children:"http://www.w3.org/2000/09/xmldsig#rsa-sha1"}),", ",(0,i.jsx)(n.code,{children:"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"})," or ",(0,i.jsx)(n.code,{children:"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"})," and the default value is ",(0,i.jsx)(n.code,{children:"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"messagesigningorder",children:"messageSigningOrder"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"messageSigningOrder"})," indicates the signing and encrypting order of IdP, it's value should be either ",(0,i.jsx)(n.code,{children:"sign-then-encrypt"})," or ",(0,i.jsx)(n.code,{children:"encrypt-then-sign"})," and the default value is ",(0,i.jsx)(n.code,{children:"sign-then-encrypt"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"privatekey-and-privatekeypass",children:"privateKey and privateKeyPass"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"privateKey"})," is an OPTIONAL value and is required when ",(0,i.jsx)(n.code,{children:"signAuthnRequest"})," is ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"privateKeyPass"})," is the password you've set when creating ",(0,i.jsx)(n.code,{children:"privateKey"}),", required when necessary."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"signAuthnRequest"})," is ",(0,i.jsx)(n.code,{children:"true"}),", the corresponding certificate generated from ",(0,i.jsx)(n.code,{children:"privateKey"})," is required by IdP for checking the signature."]}),"\n",(0,i.jsx)(n.h4,{id:"encprivatekey-and-encprivatekeypass",children:"encPrivateKey and encPrivateKeyPass"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"encPrivateKey"})," is an OPTIONAL value and is required when ",(0,i.jsx)(n.code,{children:"encryptAssertion"})," is ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"encPrivateKeyPass"})," is the password you've set when creating ",(0,i.jsx)(n.code,{children:"encPrivateKey"}),", required when necessary."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"encryptAssertion"})," is ",(0,i.jsx)(n.code,{children:"true"}),", the corresponding certificate generated from ",(0,i.jsx)(n.code,{children:"encPrivateKey"})," is required by IdP for encrypting SAML assertion."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u2139\ufe0f ",(0,i.jsx)(n.strong,{children:"Note"})]}),"\n",(0,i.jsxs)(n.p,{children:["For keys and certificates generation, ",(0,i.jsx)(n.code,{children:"openssl"})," is a wonderful tool. Here is sample command line that might be helpful:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"openssl genrsa -passout pass:${privateKeyPassword} -out ${encryptPrivateKeyFilename}.pem 4096\nopenssl req -new -x509 -key ${encryptPrivateKeyFilename}.pem -out ${encryptionCertificateFilename}.cer -days 3650\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"privateKey"})," and ",(0,i.jsx)(n.code,{children:"encPrivateKey"})," files are enforced to be encoded in ",(0,i.jsx)(n.code,{children:"pkcs1"})," scheme as pem string, which means the private key files should start with ",(0,i.jsx)(n.code,{children:"-----BEGIN RSA PRIVATE KEY-----"})," and end with ",(0,i.jsx)(n.code,{children:"-----END RSA PRIVATE KEY-----"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"nameidformat",children:"nameIDFormat"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"nameIDFormat"})," is an OPTIONAL attribute that declares the name id format that would respond. The value can be among ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"}),", ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"}),", ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"}),", ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"})," and ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:2.0:nameid-format:transient"}),", and the default value is ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:2.0:nameid-format:unspecified"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"timeout",children:"timeout"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"timeout"})," is the time tolerance for time validation, since the time between your SP entity and IdP entity could be different and network connection may also bring some delay. The unit is in millisecond, and the default value is 5000 (i.e. 5s)."]}),"\n",(0,i.jsx)(n.h4,{id:"profilemap",children:"profileMap"}),"\n",(0,i.jsxs)(n.p,{children:["Logto also provide a ",(0,i.jsx)(n.code,{children:"profileMap"})," field that users can customize the mapping from the social vendors' profiles which are usually not standard. Each ",(0,i.jsx)(n.code,{children:"profileMap"})," keys is Logto's standard user profile field name and corresponding value should be social profiles field name. In current stage, Logto only concern 'id', 'name', 'avatar', 'email' and 'phone' from social profile, only 'id' is REQUIRED and others are optional fields."]}),"\n",(0,i.jsx)(n.h4,{id:"config-types",children:"Config types"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Default Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"signInEndpoint"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"x509certificate"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"idpMetadataXml"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"entityID"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertionConsumerServiceUrl"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"messageSigningOrder"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"encrypt-then-sign"})," | ",(0,i.jsx)(n.code,{children:"sign-then-encrypt"})]}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sign-then-encrypt"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"requestSignatureAlgorithm"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"http://www.w3.org/2000/09/xmldsig#rsa-sha1"})," | ",(0,i.jsx)(n.code,{children:"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"})," | ",(0,i.jsx)(n.code,{children:"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"})]}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"signAuthnRequest"}),(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"encryptAssertion"}),(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"privateKey"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"privateKeyPass"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"nameIDFormat"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"})," | ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"})," | ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"})," | ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"})," | ",(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:2.0:nameid-format:transient"})]}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"timeout"}),(0,i.jsx)(n.td,{children:"number"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"5000"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"profileMap"}),(0,i.jsx)(n.td,{children:"ProfileMap"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{})]})]})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"ProfileMap fields"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Default value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"id"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"id"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"avatar"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"avatar"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"email"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"email"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"phone"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"false"}),(0,i.jsx)(n.td,{children:"phone"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf",children:"Profiles for the OASIS Security Assertion Markup Language (SAML) V2.0"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/tngan/samlify",children:"samlify - Highly configuarable Node.js SAML 2.0 library for Single Sign On"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},3101:(e,n,t)=>{t.d(n,{ZP:()=>j,d$:()=>x});var i=t(11527),r=t(17279),s=t(83861),o=t(33141),d=t(35954),a=t(11231),c=t(61648),l=t(93814),h=t(46007),u=t(93009),p=t(94842);const x=[...h.d$,{value:"Installation",id:"installation",level:3},...u.d$,{value:"Add Logto authentication",id:"add-logto-authentication",level:3},...a.d$,{value:"Add sign-in redirect URI",id:"add-sign-in-redirect-uri",level:3},...c.d$,{value:"Add sign-out redirect URI",id:"add-sign-out-redirect-uri",level:3},...l.d$,{value:"Add routes",id:"add-routes",level:3},...s.d$,{value:"Implement sign-in/sign-out buttons",id:"implement-sign-insign-out-buttons",level:3},...d.d$,{value:"The <code>&lt;AuthorizeView /&gt;</code> component",id:"the-authorizeview--component",level:3},...o.d$,...p.d$];function g(e){const n={code:"code",h3:"h3",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(h.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(u.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"add-logto-authentication",children:"Add Logto authentication"}),"\n",(0,i.jsx)(a.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"add-sign-in-redirect-uri",children:"Add sign-in redirect URI"}),"\n",(0,i.jsx)(c.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"add-sign-out-redirect-uri",children:"Add sign-out redirect URI"}),"\n",(0,i.jsx)(l.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"add-routes",children:"Add routes"}),"\n",(0,i.jsx)(s.ZP,{}),"\n",(0,i.jsx)(n.h3,{id:"implement-sign-insign-out-buttons",children:"Implement sign-in/sign-out buttons"}),"\n",(0,i.jsx)(d.ZP,{}),"\n",(0,i.jsxs)(n.h3,{id:"the-authorizeview--component",children:["The ",(0,i.jsx)(n.code,{children:"<AuthorizeView />"})," component"]}),"\n",(0,i.jsx)(o.ZP,{}),"\n",(0,i.jsx)(p.ZP,{sdk:".NET Core (Blazor Server)"})]})}function j(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},46290:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,connector:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=t(11527),r=t(17279);t(87593),t(80710),t(12665),t(80386),t(31877),t(23095),t(3101),t(52393);const s={slug:"how-to-build-saml-sign-in-with-dotnet-core-blazor-server-and-logto",authors:"logto",tags:["authentication","saml","dotnet-core-blazor-server","c#","social-sign-in","sign-in","login"],title:"How to build SAML sign-in with .NET Core (Blazor Server) and Logto"},o=void 0,d={permalink:"/tutorial/how-to-build-saml-sign-in-with-dotnet-core-blazor-server-and-logto",source:"@site/tutorial/build-with-logto/generated-dotnet-core-blazor-server-saml.mdx",title:"How to build SAML sign-in with .NET Core (Blazor Server) and Logto",description:"\x3c!--",date:"2024-06-30T08:28:35.000Z",tags:[{inline:!0,label:"authentication",permalink:"/tutorial/tags/authentication"},{inline:!0,label:"saml",permalink:"/tutorial/tags/saml"},{inline:!0,label:"dotnet-core-blazor-server",permalink:"/tutorial/tags/dotnet-core-blazor-server"},{inline:!0,label:"c#",permalink:"/tutorial/tags/c"},{inline:!0,label:"social-sign-in",permalink:"/tutorial/tags/social-sign-in"},{inline:!0,label:"sign-in",permalink:"/tutorial/tags/sign-in"},{inline:!0,label:"login",permalink:"/tutorial/tags/login"}],readingTime:1.33,hasTruncateMarker:!0,authors:[{name:"Logto team",title:"The better identity infrastructure for developers",url:"https://logto.io",imageURL:"https://github.com/logto-io.png",key:"logto"}],frontMatter:{slug:"how-to-build-saml-sign-in-with-dotnet-core-blazor-server-and-logto",authors:"logto",tags:["authentication","saml","dotnet-core-blazor-server","c#","social-sign-in","sign-in","login"],title:"How to build SAML sign-in with .NET Core (Blazor Server) and Logto"},unlisted:!1,prevItem:{title:"How to build OIDC sign-in with .NET Core (Blazor Server) and Logto",permalink:"/tutorial/how-to-build-oidc-sign-in-with-dotnet-core-blazor-server-and-logto"},nextItem:{title:"How to build SendGrid Email passwordless sign-in with .NET Core (Blazor Server) and Logto",permalink:"/tutorial/how-to-build-sendgrid-sign-in-with-dotnet-core-blazor-server-and-logto"}},a={authorsImageUrls:[void 0]},c="SAML",l=[];function h(e){return(0,i.jsx)(i.Fragment,{})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h()}},83861:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Since Blazor Server uses SignalR to communicate between the server and the client, this means methods that directly manipulate the HTTP context (like issuing challenges or redirects) don't work as expected when called from a Blazor component."}),"\n",(0,i.jsx)(n.p,{children:"To make it right, we need to explicitly add two endpoints for sign-in and sign-out redirects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'app.MapGet("/SignIn", async context =>\n{\n    if (!(context.User?.Identity?.IsAuthenticated ?? false))\n    {\n        await context.ChallengeAsync(new AuthenticationProperties { RedirectUri = "/" });\n    } else {\n        context.Response.Redirect("/");\n    }\n});\n\napp.MapGet("/SignOut", async context =>\n{\n    if (context.User?.Identity?.IsAuthenticated ?? false)\n    {\n        await context.SignOutAsync(new AuthenticationProperties { RedirectUri = "/" });\n    } else {\n        context.Response.Redirect("/");\n    }\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now we can redirect to these endpoints to trigger sign-in and sign-out."})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},33141:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Alternatively, you can use the ",(0,i.jsx)(n.code,{children:"AuthorizeView"})," component to conditionally render content based on the user's authentication state. This component is useful when you want to show different content to authenticated and unauthenticated users."]}),"\n",(0,i.jsx)(n.p,{children:"In your Razor component, add the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cshtml",children:"@using Microsoft.AspNetCore.Components.Authorization\n\n@* ... *@\n\n<AuthorizeView>\n    <Authorized>\n        <p>Name: @User?.Identity?.Name</p>\n        @* Content for authenticated users *@\n    </Authorized>\n    <NotAuthorized>\n        @* Content for unauthenticated users *@\n    </NotAuthorized>\n</AuthorizeView>\n\n@* ... *@\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AuthorizeView"})," component requires a cascading parameter of type ",(0,i.jsx)(n.code,{children:"Task<AuthenticationState>"}),". A direct way to get this parameter is to add the ",(0,i.jsx)(n.code,{children:"<CascadingAuthenticationState>"})," component. However, due to the nature of Blazor Server, we cannot simply add the component to the layout or the root component (it may not work as expected). Instead, we can add the following code to the builder (",(0,i.jsx)(n.code,{children:"Program.cs"})," or ",(0,i.jsx)(n.code,{children:"Startup.cs"}),") to provide the cascading parameter:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"builder.Services.AddCascadingAuthenticationState();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then you can use the ",(0,i.jsx)(n.code,{children:"AuthorizeView"})," component in every component that needs it."]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},35954:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In the Razor component, add the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cshtml",children:'@using Microsoft.AspNetCore.Components.Authorization\n@using System.Security.Claims\n@inject AuthenticationStateProvider AuthenticationStateProvider\n@inject NavigationManager NavigationManager\n\n@* ... *@\n\n<p>Is authenticated: @User.Identity?.IsAuthenticated</p>\n@if (User.Identity?.IsAuthenticated == true)\n{\n    <button @onclick="SignOut">Sign out</button>\n}\nelse\n{\n    <button @onclick="SignIn">Sign in</button>\n}\n\n@* ... *@\n\n@code {\n    private ClaimsPrincipal? User { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();\n        User = authState.User;\n    }\n\n    private void SignIn()\n    {\n        NavigationManager.NavigateTo("/SignIn", forceLoad: true);\n    }\n\n    private void SignOut()\n    {\n        NavigationManager.NavigateTo("/SignOut", forceLoad: true);\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The injected ",(0,i.jsx)(n.code,{children:"AuthenticationStateProvider"})," is used to get the current user's authentication state, and populate the ",(0,i.jsx)(n.code,{children:"User"})," property."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"SignIn"})," and ",(0,i.jsx)(n.code,{children:"SignOut"})," methods are used to redirect the user to the sign-in and sign-out endpoints respectively. Since the nature of Blazor Server, we need to use ",(0,i.jsx)(n.code,{children:"NavigationManager"})," with force load to trigger the redirection."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'The page will show the "Sign in" button if the user is not authenticated, and show the "Sign out" button if the user is authenticated.'})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},11231:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.code,{children:"Startup.cs"})," (or ",(0,i.jsx)(n.code,{children:"Program.cs"}),") and add the following code to register Logto authentication services:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Logto.AspNetCore.Authentication;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  options.Endpoint = builder.Configuration["Logto:Endpoint"]!;\n  options.AppId = builder.Configuration["Logto:AppId"]!;\n  options.AppSecret = builder.Configuration["Logto:AppSecret"];\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AddLogtoAuthentication"})," method will do the following things:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Set the default authentication scheme to ",(0,i.jsx)(n.code,{children:"LogtoDefaults.CookieScheme"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Set the default challenge scheme to ",(0,i.jsx)(n.code,{children:"LogtoDefaults.AuthenticationScheme"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Set the default sign-out scheme to ",(0,i.jsx)(n.code,{children:"LogtoDefaults.AuthenticationScheme"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Add cookie and OpenID Connect authentication handlers to the authentication scheme."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},61648:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Add the following URI to the ",(0,i.jsx)(n.code,{children:"Redirect URIs"})," list in the Logto application details page:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://<your-web-app-uri>/Callback\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note this is different from the redirect URI we'll use later in ",(0,i.jsx)(n.code,{children:"AuthenticationProperties"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Just for reference, we will demonstrate how to use it later\nnew AuthenticationProperties\n{\n  RedirectUri = "/"\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RedirectUri"})," property is used to redirect the user back to your web application after authentication. Note it is different from the redirect URI you configured in the Logto application details page:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The redirect URI in the Logto application details page is the URI that Logto will redirect the user back to after the user has signed in."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"RedirectUri"})," property is the URI that will be redirected to after necessary actions have been taken in the Logto authentication middleware."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The order of the actions is 1 -> 2. For clarity, let's call the redirect URI in the Logto application details page the ",(0,i.jsx)(n.strong,{children:"Logto redirect URI"})," and the ",(0,i.jsx)(n.code,{children:"RedirectUri"})," property the ",(0,i.jsx)(n.strong,{children:"application redirect URI"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Logto redirect URI"})," has a default value of ",(0,i.jsx)(n.code,{children:"/Callback"}),", which you can leave it as is if there's no special requirement. If you want to change it, you can set the ",(0,i.jsx)(n.code,{children:"CallbackPath"})," property for ",(0,i.jsx)(n.code,{children:"LogtoOptions"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddLogtoAuthentication(options =>\n{\n  // Other configurations...\n  options.CallbackPath = "/SomeOtherCallbackPath";\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"Remember to update the value in the Logto application details page accordingly."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["No need to set the ",(0,i.jsx)(n.strong,{children:"application redirect URI"})," in the Logto application details page."]})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},93814:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Add the following URI to the ",(0,i.jsx)(n.code,{children:"Post sign-out redirect URIs"})," list in the Logto application details page:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://<your-web-app-uri>/SignedOutCallback\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note this is different from the redirect URI we'll use later in ",(0,i.jsx)(n.code,{children:"AuthenticationProperties"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Just for reference, we will demonstrate how to use it later\nnew AuthenticationProperties\n{\n  RedirectUri = "/"\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RedirectUri"})," property is used to redirect the user back to your web application after sign-out. Note it is different from the post sign-out redirect URI you configured in the Logto application details page:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The post sign-out redirect URI in the Logto application details page is the URI that Logto will redirect the user back to after the user has signed out."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"RedirectUri"})," property is the URI that will be redirected to after necessary actions have been taken in the Logto authentication middleware."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The order of the actions is 1 -> 2. For clarity, let's call the post sign-out redirect URI in the Logto application details page the ",(0,i.jsx)(n.strong,{children:"Logto post sign-out redirect URI"})," and the ",(0,i.jsx)(n.code,{children:"RedirectUri"})," property the ",(0,i.jsx)(n.strong,{children:"application post sign-out redirect URI"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Logto post sign-out redirect URI"})," has a default value of ",(0,i.jsx)(n.code,{children:"/SignedOutCallback"}),", which you can leave it as is if there's no special requirement. If you want to change it, you can set the ",(0,i.jsx)(n.code,{children:"SignedOutCallbackPath"})," property for ",(0,i.jsx)(n.code,{children:"LogtoOptions"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'builder.Services.AddLogtoAuthentication(options =>\n{\n  // Other configurations...\n  options.SignedOutCallbackPath = "/SomeOtherSignedOutCallbackPath";\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"Remember to update the value in the Logto application details page accordingly."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["No need to set the ",(0,i.jsx)(n.strong,{children:"application post sign-out redirect URI"})," in the Logto application details page."]})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},46007:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={a:"a",admonition:"admonition",li:"li",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The following demonstration is built on .NET Core 8.0. The SDK is compatible with .NET 6.0 or higher."}),"\n",(0,i.jsxs)(n.li,{children:["The .NET Core sample projects are available in the ",(0,i.jsx)(n.a,{href:"https://github.com/logto-io/csharp",children:"GitHub repository"}),"."]}),"\n"]})})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},93009:(e,n,t)=>{t.d(n,{ZP:()=>d,d$:()=>s});var i=t(11527),r=t(17279);const s=[];function o(e){const n={code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Add the NuGet package to your project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet add package Logto.AspNetCore.Authentication\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);